{
    "swagger": "2.0",
    "info": {
        "title": "Bungalow Insurance API",
        "description": "Generate quotes and purchase renters insurance via the Bungalow API, powered by Homesite. The general workflow is as follows:\n\n1. Request a quote: POST /api/v1/quote_requests\n2. Receive a webhook indicating that the quote is ready (20-30s)\n3. Retrieve the quote with various coverage options: GET /api/v1/quote_requests/:quote_request_id/coverage_options\n4. Update coverage options (optional): PATCH /api/v1/quote_requests/:quote_request_id/coverage_options\n5. Purchase the quote with selected options: POST /api/v1/quote_requests/:quote_request_id/purchases\n6. Request the Evidence of Insurance PDF document: GET /api/v1/quote_requests/:quote_request_id/eoi\n\nThe quote request in #1 is the entry point to our API but we also recommend that you validate and/or correct the address provided by the user before requesting a quote. There are several reliable (and free) API services that provide this functionality. Behind the scenes we use Lob.com's service for https://www.bungalowinsurance.com.\n\nAll endpoints receive and return JSON. The steps above are documented (or will be shortly) on the left. The webhook in #2 is currently a simple POST request to an endpoint of your choice (coordinate with Bungalow to configure) and will contain a small JSON object indicating the status (e.g. { quote_request_id: 12, status: status } where status is one of 'rate_available', 'ssn_required', 'dnq', or 'provider_error').\n\nIn some cases the webhook will indicate that a quote is unavailable, either due to ineligibility/disqualification or an inability to identify the renter (webhook status will be 'dnq' or 'provider_error'). The status may also be 'ssn_required', in which case you are required to re-send the quote request with a social security number for the renter and a prior address: PATCH /api/v1/quote_requests/:quote_request_id/ssn.\n\nIf a rate is available (status is 'rate_available'), you should proceed to quote retrieval/coverage options in #3.\n\nThis documentation is a work in progress. For any questions or feedback please reach out to Paul Hiatt (paul@bungalowinsurance.com).\n\n**API Version** 1.0.0\n",
        "version": "1.0.0"
    },
    "host": "staging.bungalowinsurance.com",
    "schemes": [
        "https"
    ],
    "basePath": "/api/v1",
    "securityDefinitions": {
        "Token": {
            "description": "Simple HTTP Token authentication (i.e. an 'Authorization' header field with\n'Token token=test1234' as the value). Your token will be provided by Bungalow.\n",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "produces": [
        "application/json"
    ],
    "paths": {
        "/quote_requests": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "summary": "Generate a quote for renters insurance",
                "description": "This is the entry point for the renters insurance purchase workflow. A\nsuccessful quote request will trigger a background process that performs\na number of actions (identity confirmation, geographic risk analysis, etc.)\nand build a renters insurance quote.\n\n**IMPORTANT**: A successful response from this endpoint will not include the\nquote itself, it initiates a long-running (20-30 second) process that\nwill generate the quote. Completion of this process results in a webhook\n(documented elsewhere).\n",
                "parameters": [
                    {
                        "name": "quote_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestRoot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A simple object with the quote request id for future reference.",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Validation failure",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestResponseWithErrors"
                        }
                    }
                }
            }
        },
        "/quote_requests/{quote_request_id}/ssn": {
            "patch": {
                "parameters": [
                    {
                        "name": "quote_request_id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "ssn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SsnRequest"
                        }
                    }
                ],
                "description": "Provide additional identifying information (ssn, prior address) if the\nwebhook indicates that additional information is required for a quote.\n",
                "responses": {
                    "200": {
                        "description": "A successful response will have no body. Instead you will receive another\nwebhook indicating whether or not the updated quote request succeeded.\n"
                    }
                }
            }
        },
        "/quote_requests/{quote_request_id}/coverage_options": {
            "get": {
                "parameters": [
                    {
                        "name": "quote_request_id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "description": "Request quote details and coverage options after the webhook indicating that\na rate is available.\n",
                "responses": {
                    "201": {
                        "description": "A JSON object with quote details and coverage options. Coverage fields and coverage values are dynamic response returned from Homesite.\n",
                        "schema": {
                            "$ref": "#/definitions/CoverageOptionsResponse"
                        }
                    },
                    "404": {
                        "description": "The quote request is not ready yet"
                    }
                }
            },
            "patch": {
                "parameters": [
                    {
                        "name": "quote_request_id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "coverage_options",
                        "in": "body",
                        "required": true,
                        "description": "The coverage_options param is a JSON object with the same format as the coverage_values object from the GET request, e.g. { personal_property: '$20,000'} and must contain all keys as were found in the coverage_values object. Contact Paul if you are confused, this is an unusual API pattern but is necessary due to our underlying provider's unpredicatable response structure.\n",
                        "schema": {
                            "$ref": "#/definitions/CoverageOptionsRequest"
                        }
                    }
                ],
                "description": "Update coverage options (e.g. personal property amounts) based on options\nprovided in the /coverage_options GET request (documented above).\n",
                "responses": {
                    "200": {
                        "description": "A JSON object with quote details and coverage options. Coverage fields and coverage values are dynamic response returned from Homesite.\n",
                        "schema": {
                            "$ref": "#/definitions/CoverageOptionsResponse"
                        }
                    }
                }
            }
        },
        "/quote_requests/{quote_request_id}/purchases": {
            "post": {
                "description": "This is the end point to purchase insurance based on your quote. A successful purchase will be returned with the amount paid, the policy number and the effective date. \n",
                "parameters": [
                    {
                        "name": "quote_request_id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "purchase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurchaseRoot"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A simple object with the policy number and effective date of policy for future reference.",
                        "schema": {
                            "$ref": "#/definitions/PurchaseResponse"
                        }
                    },
                    "422": {
                        "description": "Validation failure",
                        "schema": {
                            "$ref": "#/definitions/PurchaseResponseWithErrors"
                        }
                    }
                }
            }
        },
        "/quote_requests/{quote_request_id}/eoi": {
            "get": {
                "parameters": [
                    {
                        "name": "quote_request_id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "description": "Request an evidence insurance document after a successful purchase.\n",
                "responses": {
                    "201": {
                        "description": "A JSON object with the EOI PDF data encoded in base64.\n",
                        "schema": {
                            "$ref": "#/definitions/EOIResponse"
                        }
                    },
                    "401": {
                        "description": "Quote Request was not purchased",
                        "schema": {
                            "$ref": "#/definitions/EOIResponseWithErrors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "QuoteRequestRoot": {
            "type": "object",
            "properties": {
                "quote_request": {
                    "$ref": "#/definitions/QuoteRequest"
                }
            }
        },
        "QuoteRequest": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "description": "First name of insured, 20 characters max"
                },
                "last_name": {
                    "type": "string",
                    "description": "Last name of insured, 20 characters max"
                },
                "date_of_birth": {
                    "type": "string",
                    "description": "DOB of insured in YYYY-MM-DD format. Year must be greater than 1900 and\ninsured at least 18 years of age\n"
                },
                "email": {
                    "type": "string",
                    "description": "Primary email of insured"
                },
                "ssn": {
                    "type": "string",
                    "description": "(optional unless Homesite required) 10 digits SSN number"
                },
                "secondary_insured": {
                    "type": "boolean",
                    "description": "the secondary insured is a roommate or spouse who lives in the same residence. He or she will have equivalent coverage under the policy"
                },
                "secondary_insured_first_name": {
                    "type": "string",
                    "description": "(required when secondary_insured is true) First name of secondary insured, 20 characters max"
                },
                "secondary_insured_last_name": {
                    "type": "string",
                    "description": "(required when secondary_insured is true) Last name of secondary insured, 29 characters max"
                },
                "property_address_line1": {
                    "type": "string",
                    "description": "address line 1 of insured property"
                },
                "property_address_line2": {
                    "type": "string",
                    "description": "(optional) address line 2 of insured property"
                },
                "property_city": {
                    "type": "string",
                    "description": "city of insured property"
                },
                "property_state": {
                    "type": "string",
                    "description": "state of insured property"
                },
                "property_zip": {
                    "type": "string",
                    "description": "zip code of insured property"
                },
                "prior_address_line1": {
                    "type": "string",
                    "description": "(optional) prior address line 1"
                },
                "prior_address_line2": {
                    "type": "string",
                    "description": "(optional) prior address line 2"
                },
                "prior_city": {
                    "type": "string",
                    "description": "(optional) city of prior address"
                },
                "prior_state": {
                    "type": "string",
                    "description": "(optional unless Homesite required) acronym for state of prior address, i.e. 'CA', 'NY'"
                },
                "prior_zip": {
                    "type": "string",
                    "description": "(optional) zip code of prior address"
                },
                "dogs_or_pets": {
                    "type": "boolean",
                    "description": "Does insured have a dog(s) or a pet(s)?"
                },
                "dog_breed": {
                    "type": "string",
                    "description": "(required when dogs_or_pets is true) options for insured's dog are the following:\n  'Akita', 'Alaskan Malamute', 'Chow Chow', 'Doberman', 'Pit Bull', 'Rotweiller', 'Staffordshire Terrier', and 'NONE OF THE ABOVE'\n"
                },
                "animals_bitten": {
                    "type": "boolean",
                    "description": "(required when dogs_or_pets is true) has insured's dog ever bitten anyone?"
                },
                "number_of_apartments": {
                    "type": "string",
                    "description": "'number of apartments in building, i.e. ''1'', ''2'', ''3'', etc.' up to '9', or \"10 or more\"\n"
                },
                "residence_employees": {
                    "type": "integer",
                    "description": "(required when state is 'CA' or 'NJ') number of full time employees who live in insured property."
                },
                "effective_date_of_policy": {
                    "type": "string",
                    "description": "Effective date of policy in YYYY-MM-DD format. Date must be greater than today and less than 60 days from today.\n"
                },
                "referral_source": {
                    "type": "string",
                    "description": "Your application name (e.g. 'apartmentsRus'). Just a quick way to determine where quote requests are coming from."
                },
                "workers_compensation_policy": {
                    "type": "boolean",
                    "description": "(required when state is 'NJ' and residence_employees is greater than 0) Are the employees (if any) covered under a separate Workers Compensation Policy?"
                },
                "additional_interested_party": {
                    "type": "boolean",
                    "description": "(optional when state is 'PA') Did your landloard or property manager ask to be added as an 'additional interested party' to your policy?"
                },
                "storm_shutters": {
                    "type": "boolean",
                    "description": "(required when state is 'NY') Are all the doors, windows, skylights and vents fitted with hurricane resistant storm shutters?"
                },
                "laminated_glass": {
                    "type": "boolean",
                    "description": "(required when state is 'NY') Are all the doors, windows, and skylights fitted with hurricane resistant laminated glass?"
                },
                "guide_dog": {
                    "type": "boolean",
                    "description": "(required when state is 'NY' and dogs_or_pets is true) Is your dog a Certified Guide Dog?"
                },
                "claim_paid_to_third_party_from_bite": {
                    "type": "boolean",
                    "description": "(required when state is 'MI' or 'MD' and dogs_or_pets is true) Has a claim been paid to a 3rd party (as a result of a bite)?"
                },
                "animal_aggressive": {
                    "type": "boolean",
                    "description": "(required when state is 'MI' or 'MD' and dogs_or_pets is true) Have any of your dogs been declared aggressive by the state or community?"
                },
                "total_number_of_people": {
                    "type": "integer",
                    "description": "(required when state is not 'PA') How many people are living in your unit? Include residents who consider this address their primary home. Include dependent children, even if they are away at boarding school or college for most of the year."
                },
                "any_retiree": {
                    "type": "boolean",
                    "description": "(required when state is 'NY', 'CA' or 'CT') Is the insured or secondary insured retired?"
                },
                "home_day_care": {
                    "type": "boolean",
                    "description": "(required when state is 'MD') Do you operate a Home Day Care in your home?"
                },
                "registered_day_care": {
                    "type": "boolean",
                    "description": "(required when state is 'MD' and home_day_care is true) Is your home a registered Home Day Care facility?"
                },
                "certificate_number_day_care": {
                    "type": "string",
                    "description": "(required when state is 'MD', home_day_care is true and registered_day_care is true) Home Day Care certificate number"
                },
                "home_day_care_certificate_expires_on": {
                    "type": "string",
                    "description": "(required when state is 'MD', home_day_care is true and registered_day_care is true) Home Day care certificate expiration date in YYYY-MM-DD format"
                },
                "providers_day_care": {
                    "type": "integer",
                    "description": "(required when state is 'MD', home_day_care is true and registered_day_care is true) Home many Home Day Care providers are on the license?"
                },
                "children_day_care": {
                    "type": "integer",
                    "description": "(required when state is 'MD', and home_day_care is true) How many children are in your Home Day Care at a time?"
                },
                "children_under_two_day_care": {
                    "type": "integer",
                    "description": "(required when state is 'MD', and home_day_care is true) How many children are under the age of 2?"
                },
                "day_care_coverage": {
                    "type": "boolean",
                    "description": "(required when state is 'MD' and home_day_care is true) Would you like Home Day Care Coverage?"
                },
                "seperate_building_day_care": {
                    "type": "boolean",
                    "description": "(required when state is 'MD', home_day_care is true, and day_care_coverag is true) Is the Day Care in a separate building located on your property?"
                },
                "sprinklers_in_every_room": {
                    "type": "boolean",
                    "description": "(required when state is 'TX') Are there spinklers in every room, including bathrooms, attics, closets, and attached structures?"
                },
                "sprinklers_in_every_room_ex": {
                    "type": "boolean",
                    "description": "(required when state is 'TX') Are there sprinklers in every room, excluding bathrooms, attics, closets, or attached structures?"
                },
                "storm_protective_fixtures": {
                    "type": "boolean",
                    "description": "(required when state is 'VI', 'RI', or 'CT') Does your property have profesionally installed windstorm shutters or protective awnings (kept on the home throughout the entire year) or professionally installed foundation tiedowns?"
                },
                "renters_personal_property": {
                    "type": "string",
                    "description": "Personal property amount, one of: \"$15,000\", \"$20,000\", \"$25,000\", \"$30,000\", \"Other Amount\"\n"
                }
            }
        },
        "QuoteRequestResponse": {
            "type": "object",
            "properties": {
                "quote_request": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "QuoteRequestResponseWithErrors": {
            "type": "object",
            "properties": {
                "quote_request": {
                    "type": "object",
                    "properties": {
                        "errors": {
                            "type": "object",
                            "properties": {
                                "field_name": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "SsnRequest": {
            "type": "object",
            "properties": {
                "ssn": {
                    "type": "object",
                    "description": "A JSON object which contains the address where the renter was staying before moving to the current insured.",
                    "properties": {
                        "ssn": {
                            "type": "string"
                        },
                        "prior_address_line1": {
                            "type": "string"
                        },
                        "prior_address_line2": {
                            "type": "string"
                        },
                        "prior_city": {
                            "type": "string"
                        },
                        "prior_zip": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "CoverageOptionsRequest": {
            "type": "object",
            "properties": {
                "coverage_options": {
                    "type": "object"
                }
            }
        },
        "CoverageOptionsResponse": {
            "type": "object",
            "properties": {
                "coverage_options": {
                    "type": "object",
                    "properties": {
                        "quote_number": {
                            "type": "string"
                        },
                        "annual_cost": {
                            "type": "string"
                        },
                        "coverage_fields": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CoverageField"
                            }
                        },
                        "coverage_values": {
                            "type": "object",
                            "description": "A JSON object for covered coverage options from Homesite. This is dynamically generated for each quote request. Example of responses are shown below.",
                            "properties": {
                                "personal_property": {
                                    "type": "string"
                                },
                                "personal_liability": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "CoverageField": {
            "type": "object",
            "description": "description of field Homesite is using for each coverage option.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "this value will be used to match with key provided in coverage_values, i.e. personal_property, personal_liability"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "homesite_id": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                }
            }
        },
        "PurchaseRoot": {
            "type": "object",
            "properties": {
                "purchase": {
                    "$ref": "#/definitions/PurchaseRequest"
                }
            }
        },
        "PurchaseRequest": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string",
                    "description": "Phone number of payer"
                },
                "same_as_property_address": {
                    "type": "boolean",
                    "description": "Option for using the same address of the property. False value on this option will require mailing_address_line_1, mailing_city, mailing_state to be provided."
                },
                "mailing_address_line_1": {
                    "type": "string",
                    "description": "mailing address line 1"
                },
                "mailing_address_line_2": {
                    "type": "string",
                    "description": "(optional) mailing address line 2"
                },
                "mailing_city": {
                    "type": "string",
                    "description": "city of mailing address"
                },
                "mailing_state": {
                    "type": "string",
                    "description": "acronym for state of mailing address, i.e. 'CA', 'NY'"
                },
                "card_holder_first_name": {
                    "type": "string",
                    "description": "first name of credit card holder"
                },
                "card_holder_last_name": {
                    "type": "string",
                    "description": "last name of credit card holder"
                },
                "card_type": {
                    "type": "string",
                    "description": "options for type of the credit card are 'VISA', 'MasterCard', 'AmericanExpress', and 'Discover'"
                },
                "card_number": {
                    "type": "string",
                    "description": "number of the credit card"
                },
                "payment_plan": {
                    "type": "string",
                    "description": "options for payment plan are 'Yearly' or 'Monthly'"
                },
                "card_expiration_month": {
                    "type": "string",
                    "description": "month of credit card expiration, i.e. '10', '11'"
                },
                "card_expiration_year": {
                    "type": "string",
                    "description": "year of credit card expiration, i.e. '19'"
                },
                "electronic_signature": {
                    "type": "string",
                    "description": "electronic signature. This is required when payment_plan is 'Monthly'."
                }
            }
        },
        "PurchaseResponse": {
            "type": "object",
            "properties": {
                "purchase": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "policy_number": {
                            "type": "string"
                        },
                        "effective_date_of_policy": {
                            "type": "string"
                        },
                        "amount_payment_cents": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "PurchaseResponseWithErrors": {
            "type": "object",
            "properties": {
                "purchase": {
                    "type": "object",
                    "properties": {
                        "errors": {
                            "type": "object",
                            "properties": {
                                "field_name": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "EOIResponse": {
            "type": "object",
            "properties": {
                "eoi": {
                    "type": "object",
                    "properties": {
                        "pdf_data": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "EOIResponseWithErrors": {
            "type": "object"
        }
    }
}